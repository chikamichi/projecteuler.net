// https://projecteuler.net/problem=2
// -----------------------------------------------------------------------------
// Each new term in the Fibonacci sequence is generated by adding the previous
// two terms. By starting with 1 and 2, the first 10 terms will be:
//
//    1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
//
// By considering the terms in the Fibonacci sequence whose values do not exceed
// four million, find the sum of the even-valued terms.


// --- My solution ---

// Can be used with or without an argument. Use the latter for infinite
// iteration throughout the Fibonacci sequence.
export function* fibonacci(n, filter = null) {
  if (typeof n == "function") {
    filter = n, n = undefined
  }

  const infinite = !n && n !== 0;
  let current = 0;
  let next = 1;

  while (infinite || n--) {
    if (typeof filter == "function") {
      if (filter(current)) { yield current }
    } else { yield current }
    [current, next] = [next, current + next];
  }
}

export function solution(max) {
  let fibseq = fibonacci()
  let n = 0, steps = 0;

  // Find greatest index for which Fn < max
  while (n <= max) {
    n = fibseq.next().value
    steps++
  }

  let onlyEven = function(value) { return value % 2 == 0 }
  let [...firstN] = fibonacci(steps, onlyEven)
  return firstN.reduce((acc, i) => {
    return acc + i
  }, 0)
}

// --- Tests ---

import Mocha from 'mocha'
let mocha = new Mocha()
mocha.addFile(__dirname + '/test.js')
mocha.run(() => {

  // --- Solution ---

  console.log(solution(4000000))
})
